/* tslint:disable */
/* eslint-disable */
/**
 * swncrew backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ActuatorEnum = {
    SolenoidValve: 'solenoid valve',
    ProportionalValve: 'proportional valve',
    Pump: 'pump'
} as const;

export type ActuatorEnum = typeof ActuatorEnum[keyof typeof ActuatorEnum];


/**
 * 
 * @export
 * @interface GetActuatorsV1ActuatorsGet200ResponseInner
 */
export interface GetActuatorsV1ActuatorsGet200ResponseInner {
    /**
     * 
     * @type {ActuatorEnum}
     * @memberof GetActuatorsV1ActuatorsGet200ResponseInner
     */
    'type'?: ActuatorEnum;
    /**
     * 
     * @type {number}
     * @memberof GetActuatorsV1ActuatorsGet200ResponseInner
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetActuatorsV1ActuatorsGet200ResponseInner
     */
    'open': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetActuatorsV1ActuatorsGet200ResponseInner
     */
    'position': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetActuatorsV1ActuatorsGet200ResponseInner
     */
    'running': boolean;
}


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ProportionalValve
 */
export interface ProportionalValve {
    /**
     * 
     * @type {ActuatorEnum}
     * @memberof ProportionalValve
     */
    'type'?: ActuatorEnum;
    /**
     * 
     * @type {number}
     * @memberof ProportionalValve
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProportionalValve
     */
    'position': number;
}


/**
 * 
 * @export
 * @interface Pump
 */
export interface Pump {
    /**
     * 
     * @type {ActuatorEnum}
     * @memberof Pump
     */
    'type'?: ActuatorEnum;
    /**
     * 
     * @type {number}
     * @memberof Pump
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof Pump
     */
    'running': boolean;
}


/**
 * 
 * @export
 * @interface SolenoidValve
 */
export interface SolenoidValve {
    /**
     * 
     * @type {ActuatorEnum}
     * @memberof SolenoidValve
     */
    'type'?: ActuatorEnum;
    /**
     * 
     * @type {number}
     * @memberof SolenoidValve
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof SolenoidValve
     */
    'open': boolean;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * ActuatorsApi - axios parameter creator
 * @export
 */
export const ActuatorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Actuators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActuatorsV1ActuatorsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsProportionalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/proportional/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsPumpGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/pump/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsSolenoidGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/solenoid/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsProportionalActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsProportionalActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/proportional/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsPumpActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsPumpActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/pump/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsSolenoidActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsSolenoidActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/solenoid/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsProportionalSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsProportionalSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/proportional/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsPumpSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsPumpSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/pump/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsSolenoidSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsSolenoidSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/solenoid/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActuatorsApi - functional programming interface
 * @export
 */
export const ActuatorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActuatorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Actuators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActuatorsV1ActuatorsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetActuatorsV1ActuatorsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActuatorsV1ActuatorsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getActuatorsV1ActuatorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsProportionalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getAllV1ActuatorsProportionalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsPumpGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getAllV1ActuatorsPumpGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsSolenoidGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getAllV1ActuatorsSolenoidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getByIdV1ActuatorsProportionalActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getByIdV1ActuatorsPumpActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.getByIdV1ActuatorsSolenoidActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsProportionalSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.setStateV1ActuatorsProportionalSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsPumpSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.setStateV1ActuatorsPumpSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsSolenoidSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActuatorsApi.setStateV1ActuatorsSolenoidSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActuatorsApi - factory interface
 * @export
 */
export const ActuatorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActuatorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Actuators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActuatorsV1ActuatorsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetActuatorsV1ActuatorsGet200ResponseInner>> {
            return localVarFp.getActuatorsV1ActuatorsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsProportionalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsPumpGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsSolenoidGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsProportionalSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsPumpSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsSolenoidSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActuatorsApi - object-oriented interface
 * @export
 * @class ActuatorsApi
 * @extends {BaseAPI}
 */
export class ActuatorsApi extends BaseAPI {
    /**
     * 
     * @summary Get Actuators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getActuatorsV1ActuatorsGet(options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getActuatorsV1ActuatorsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getAllV1ActuatorsProportionalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getAllV1ActuatorsPumpGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getAllV1ActuatorsSolenoidGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).setStateV1ActuatorsProportionalSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).setStateV1ActuatorsPumpSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActuatorsApi
     */
    public setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return ActuatorsApiFp(this.configuration).setStateV1ActuatorsSolenoidSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProportionalValvesApi - axios parameter creator
 * @export
 */
export const ProportionalValvesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsProportionalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/proportional/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsProportionalActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsProportionalActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/proportional/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsProportionalSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsProportionalSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/proportional/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProportionalValvesApi - functional programming interface
 * @export
 */
export const ProportionalValvesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProportionalValvesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsProportionalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProportionalValvesApi.getAllV1ActuatorsProportionalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProportionalValvesApi.getByIdV1ActuatorsProportionalActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsProportionalSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProportionalValvesApi.setStateV1ActuatorsProportionalSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProportionalValvesApi - factory interface
 * @export
 */
export const ProportionalValvesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProportionalValvesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsProportionalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsProportionalSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProportionalValvesApi - object-oriented interface
 * @export
 * @class ProportionalValvesApi
 * @extends {BaseAPI}
 */
export class ProportionalValvesApi extends BaseAPI {
    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProportionalValvesApi
     */
    public getAllV1ActuatorsProportionalGet(options?: RawAxiosRequestConfig) {
        return ProportionalValvesApiFp(this.configuration).getAllV1ActuatorsProportionalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProportionalValvesApi
     */
    public getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return ProportionalValvesApiFp(this.configuration).getByIdV1ActuatorsProportionalActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProportionalValvesApi
     */
    public setStateV1ActuatorsProportionalSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return ProportionalValvesApiFp(this.configuration).setStateV1ActuatorsProportionalSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PumpsApi - axios parameter creator
 * @export
 */
export const PumpsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsPumpGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/pump/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsPumpActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsPumpActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/pump/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsPumpSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsPumpSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/pump/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PumpsApi - functional programming interface
 * @export
 */
export const PumpsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PumpsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsPumpGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PumpsApi.getAllV1ActuatorsPumpGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PumpsApi.getByIdV1ActuatorsPumpActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsPumpSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PumpsApi.setStateV1ActuatorsPumpSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PumpsApi - factory interface
 * @export
 */
export const PumpsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PumpsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsPumpGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsPumpSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PumpsApi - object-oriented interface
 * @export
 * @class PumpsApi
 * @extends {BaseAPI}
 */
export class PumpsApi extends BaseAPI {
    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PumpsApi
     */
    public getAllV1ActuatorsPumpGet(options?: RawAxiosRequestConfig) {
        return PumpsApiFp(this.configuration).getAllV1ActuatorsPumpGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PumpsApi
     */
    public getByIdV1ActuatorsPumpActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return PumpsApiFp(this.configuration).getByIdV1ActuatorsPumpActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PumpsApi
     */
    public setStateV1ActuatorsPumpSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return PumpsApiFp(this.configuration).setStateV1ActuatorsPumpSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolenoidValvesApi - axios parameter creator
 * @export
 */
export const SolenoidValvesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsSolenoidGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/actuators/solenoid/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsSolenoidActuatorIdGet: async (actuatorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'actuatorId' is not null or undefined
            assertParamExists('getByIdV1ActuatorsSolenoidActuatorIdGet', 'actuatorId', actuatorId)
            const localVarPath = `/v1/actuators/solenoid/{actuator_id}`
                .replace(`{${"actuator_id"}}`, encodeURIComponent(String(actuatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsSolenoidSetPost: async (setRequest: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRequest' is not null or undefined
            assertParamExists('setStateV1ActuatorsSolenoidSetPost', 'setRequest', setRequest)
            const localVarPath = `/v1/actuators/solenoid/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (setRequest !== undefined) {
                for (const [key, value] of Object.entries(setRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolenoidValvesApi - functional programming interface
 * @export
 */
export const SolenoidValvesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolenoidValvesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllV1ActuatorsSolenoidGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolenoidValvesApi.getAllV1ActuatorsSolenoidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolenoidValvesApi.getByIdV1ActuatorsSolenoidActuatorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStateV1ActuatorsSolenoidSetPost(setRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolenoidValvesApi.setStateV1ActuatorsSolenoidSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolenoidValvesApi - factory interface
 * @export
 */
export const SolenoidValvesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolenoidValvesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.getAllV1ActuatorsSolenoidGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get By Id
         * @param {number} actuatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set State
         * @param {any} setRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setStateV1ActuatorsSolenoidSetPost(setRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolenoidValvesApi - object-oriented interface
 * @export
 * @class SolenoidValvesApi
 * @extends {BaseAPI}
 */
export class SolenoidValvesApi extends BaseAPI {
    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolenoidValvesApi
     */
    public getAllV1ActuatorsSolenoidGet(options?: RawAxiosRequestConfig) {
        return SolenoidValvesApiFp(this.configuration).getAllV1ActuatorsSolenoidGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get By Id
     * @param {number} actuatorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolenoidValvesApi
     */
    public getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId: number, options?: RawAxiosRequestConfig) {
        return SolenoidValvesApiFp(this.configuration).getByIdV1ActuatorsSolenoidActuatorIdGet(actuatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set State
     * @param {any} setRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolenoidValvesApi
     */
    public setStateV1ActuatorsSolenoidSetPost(setRequest: any, options?: RawAxiosRequestConfig) {
        return SolenoidValvesApiFp(this.configuration).setStateV1ActuatorsSolenoidSetPost(setRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



