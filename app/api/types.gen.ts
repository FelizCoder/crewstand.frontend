// This file is auto-generated by @hey-api/openapi-ts

/**
 * Enumeration of possible end use types for simulations
 */
export type EndUseType = 'Shower' | 'Toilet' | 'Faucet' | 'ClothesWasher' | 'Dishwasher' | 'Bathtub' | 'other';

/**
 *     A class representing a flow control mission for a specific valve.
 *
 * This class defines a mission that controls the flow rate of a specified valve over time
 * by following a predefined trajectory of time and flow rate points.
 *
 * Parameters
 * ----------
 * valve_id : int
 * The ID of the valve to control.
 * flow_trajectory : list of TrajectoryPoint
 * A list of TrajectoryPoint instances, each specifying a time and the desired flow rate
 * until that time is reached.
 *
 * duration_scaling_factor : Optional[int]
 * The scaling factor of the event simulation. For example, a simulation with a factor of 2 and a duration of 45 s represents an original event of 90 s. This parameter helps to simulate events with different durations without changing the original trajectory.
 *
 * actual_end_use : Optional[EndUseType]
 * The actual end use type for simulation purposes.
 *
 * actual_start_time : Optional[time]
 * The time of day when the simulated event starts (HH:MM:SS).
 *
 * Raises
 * ------
 * ValueError
 * If the flow trajectory is empty, contains negative time or flow rate values,
 * or if the time values are not in strictly ascending order.
 *
 * Examples
 * --------
 * >>> from app.models.missions import FlowControlMission, TrajectoryPoint
 * >>> mission = FlowControlMission(
 * ...     valve_id=1,
 * ...     flow_trajectory=[
 * ...         TrajectoryPoint(time=10, flow_rate=22.2),
 * ...         TrajectoryPoint(time=20, flow_rate=11.1)
 * ...     ],
 * ...     duration_scaling_factor=2,  # The demo mission has a scaling factor of 2.
 * ...     actual_end_use=EndUseType.SHOWER,
 * ...     actual_start_time=time(11, 11, 11)
 * ... )
 * >>> print(mission.valve_id)
 * 1
 */
export type FlowControlMission = {
    /**
     * ID of the valve to steer
     */
    valve_id: number;
    /**
     * Definition of the Flow Trajectory. A list of TrajectoryPoint instances, where each point defines the flow rate until a specific time
     */
    flow_trajectory: Array<TrajectoryPoint>;
    /**
     * The actual end use type for simulation purposes
     */
    actual_end_use?: EndUseType | null;
    /**
     * The scaling factor of the event simulation. e.g. A simulation with a factor = 2 and a duration of 45 s represents an original event of 90 s
     */
    duration_scaling_factor?: number | null;
    /**
     * The time of day when the simulated event starts (HH:MM:SS)
     */
    actual_start_time?: string | null;
};

/**
 * Model for a flowmeter sensor.
 */
export type Flowmeter = {
    setpoint?: number | null;
    type?: 'flowmeter';
    unit?: string;
    id: number;
    current_reading?: SensorReading | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Model representing a proportional valve actuator.
 */
export type ProportionalValve = {
    type?: 'proportional valve';
    id: number;
    state: number;
    current_position?: number | null;
};

/**
 * Model representing a pump actuator.
 */
export type Pump = {
    type?: 'pump';
    id: number;
    state: boolean;
};

/**
 * Base model for an sensor.
 */
export type Sensor = {
    setpoint?: number | null;
    type: SensorEnum;
    unit: string;
    id: number;
    current_reading?: SensorReading | null;
};

/**
 * Enumeration for different types of sensors.
 */
export type SensorEnum = 'flowmeter';

/**
 * Base model for a sensor reading.
 */
export type SensorReading = {
    value: number;
    /**
     * Timestamp of the reading in nanoseconds since Epoch
     */
    timestamp_ns: number;
};

export type Setpoint = {
    setpoint?: number | null;
};

/**
 * Model representing a solenoid valve actuator.
 */
export type SolenoidValve = {
    type?: 'solenoid valve';
    id: number;
    state: boolean;
};

export type TrajectoryPoint = [
    number,
    number
];

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type GetAllActuatorsV1ActuatorsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/actuators/';
};

export type GetAllActuatorsV1ActuatorsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SolenoidValve | ProportionalValve | Pump>;
};

export type GetAllActuatorsV1ActuatorsGetResponse = GetAllActuatorsV1ActuatorsGetResponses[keyof GetAllActuatorsV1ActuatorsGetResponses];

export type GetAllV1ActuatorsSolenoidGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/actuators/solenoid/';
};

export type GetAllV1ActuatorsSolenoidGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SolenoidValve>;
};

export type GetAllV1ActuatorsSolenoidGetResponse = GetAllV1ActuatorsSolenoidGetResponses[keyof GetAllV1ActuatorsSolenoidGetResponses];

export type GetByIdV1ActuatorsSolenoidActuatorIdGetData = {
    body?: never;
    path: {
        actuator_id: number;
    };
    query?: never;
    url: '/v1/actuators/solenoid/{actuator_id}';
};

export type GetByIdV1ActuatorsSolenoidActuatorIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetByIdV1ActuatorsSolenoidActuatorIdGetError = GetByIdV1ActuatorsSolenoidActuatorIdGetErrors[keyof GetByIdV1ActuatorsSolenoidActuatorIdGetErrors];

export type GetByIdV1ActuatorsSolenoidActuatorIdGetResponses = {
    /**
     * Successful Response
     */
    200: SolenoidValve;
};

export type GetByIdV1ActuatorsSolenoidActuatorIdGetResponse = GetByIdV1ActuatorsSolenoidActuatorIdGetResponses[keyof GetByIdV1ActuatorsSolenoidActuatorIdGetResponses];

export type SetStateV1ActuatorsSolenoidSetPostData = {
    body: SolenoidValve;
    path?: never;
    query?: never;
    url: '/v1/actuators/solenoid/set';
};

export type SetStateV1ActuatorsSolenoidSetPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetStateV1ActuatorsSolenoidSetPostError = SetStateV1ActuatorsSolenoidSetPostErrors[keyof SetStateV1ActuatorsSolenoidSetPostErrors];

export type SetStateV1ActuatorsSolenoidSetPostResponses = {
    /**
     * Successful Response
     */
    200: SolenoidValve;
};

export type SetStateV1ActuatorsSolenoidSetPostResponse = SetStateV1ActuatorsSolenoidSetPostResponses[keyof SetStateV1ActuatorsSolenoidSetPostResponses];

export type GetAllV1ActuatorsProportionalGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/actuators/proportional/';
};

export type GetAllV1ActuatorsProportionalGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ProportionalValve>;
};

export type GetAllV1ActuatorsProportionalGetResponse = GetAllV1ActuatorsProportionalGetResponses[keyof GetAllV1ActuatorsProportionalGetResponses];

export type GetByIdV1ActuatorsProportionalActuatorIdGetData = {
    body?: never;
    path: {
        actuator_id: number;
    };
    query?: never;
    url: '/v1/actuators/proportional/{actuator_id}';
};

export type GetByIdV1ActuatorsProportionalActuatorIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetByIdV1ActuatorsProportionalActuatorIdGetError = GetByIdV1ActuatorsProportionalActuatorIdGetErrors[keyof GetByIdV1ActuatorsProportionalActuatorIdGetErrors];

export type GetByIdV1ActuatorsProportionalActuatorIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProportionalValve;
};

export type GetByIdV1ActuatorsProportionalActuatorIdGetResponse = GetByIdV1ActuatorsProportionalActuatorIdGetResponses[keyof GetByIdV1ActuatorsProportionalActuatorIdGetResponses];

export type SetStateV1ActuatorsProportionalSetPostData = {
    body: ProportionalValve;
    path?: never;
    query?: never;
    url: '/v1/actuators/proportional/set';
};

export type SetStateV1ActuatorsProportionalSetPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetStateV1ActuatorsProportionalSetPostError = SetStateV1ActuatorsProportionalSetPostErrors[keyof SetStateV1ActuatorsProportionalSetPostErrors];

export type SetStateV1ActuatorsProportionalSetPostResponses = {
    /**
     * Successful Response
     */
    200: ProportionalValve;
};

export type SetStateV1ActuatorsProportionalSetPostResponse = SetStateV1ActuatorsProportionalSetPostResponses[keyof SetStateV1ActuatorsProportionalSetPostResponses];

export type GetAllV1ActuatorsPumpGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/actuators/pump/';
};

export type GetAllV1ActuatorsPumpGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Pump>;
};

export type GetAllV1ActuatorsPumpGetResponse = GetAllV1ActuatorsPumpGetResponses[keyof GetAllV1ActuatorsPumpGetResponses];

export type GetByIdV1ActuatorsPumpActuatorIdGetData = {
    body?: never;
    path: {
        actuator_id: number;
    };
    query?: never;
    url: '/v1/actuators/pump/{actuator_id}';
};

export type GetByIdV1ActuatorsPumpActuatorIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetByIdV1ActuatorsPumpActuatorIdGetError = GetByIdV1ActuatorsPumpActuatorIdGetErrors[keyof GetByIdV1ActuatorsPumpActuatorIdGetErrors];

export type GetByIdV1ActuatorsPumpActuatorIdGetResponses = {
    /**
     * Successful Response
     */
    200: Pump;
};

export type GetByIdV1ActuatorsPumpActuatorIdGetResponse = GetByIdV1ActuatorsPumpActuatorIdGetResponses[keyof GetByIdV1ActuatorsPumpActuatorIdGetResponses];

export type SetStateV1ActuatorsPumpSetPostData = {
    body: Pump;
    path?: never;
    query?: never;
    url: '/v1/actuators/pump/set';
};

export type SetStateV1ActuatorsPumpSetPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetStateV1ActuatorsPumpSetPostError = SetStateV1ActuatorsPumpSetPostErrors[keyof SetStateV1ActuatorsPumpSetPostErrors];

export type SetStateV1ActuatorsPumpSetPostResponses = {
    /**
     * Successful Response
     */
    200: Pump;
};

export type SetStateV1ActuatorsPumpSetPostResponse = SetStateV1ActuatorsPumpSetPostResponses[keyof SetStateV1ActuatorsPumpSetPostResponses];

export type GetAllSensorsV1SensorsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/sensors/';
};

export type GetAllSensorsV1SensorsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Flowmeter>;
};

export type GetAllSensorsV1SensorsGetResponse = GetAllSensorsV1SensorsGetResponses[keyof GetAllSensorsV1SensorsGetResponses];

export type GetAllV1SensorsFlowmetersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/sensors/flowmeters/';
};

export type GetAllV1SensorsFlowmetersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Sensor>;
};

export type GetAllV1SensorsFlowmetersGetResponse = GetAllV1SensorsFlowmetersGetResponses[keyof GetAllV1SensorsFlowmetersGetResponses];

export type GetByIdV1SensorsFlowmetersSensorIdGetData = {
    body?: never;
    path: {
        sensor_id: number;
    };
    query?: never;
    url: '/v1/sensors/flowmeters/{sensor_id}';
};

export type GetByIdV1SensorsFlowmetersSensorIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetByIdV1SensorsFlowmetersSensorIdGetError = GetByIdV1SensorsFlowmetersSensorIdGetErrors[keyof GetByIdV1SensorsFlowmetersSensorIdGetErrors];

export type GetByIdV1SensorsFlowmetersSensorIdGetResponses = {
    /**
     * Successful Response
     */
    200: Sensor;
};

export type GetByIdV1SensorsFlowmetersSensorIdGetResponse = GetByIdV1SensorsFlowmetersSensorIdGetResponses[keyof GetByIdV1SensorsFlowmetersSensorIdGetResponses];

export type PostReadingV1SensorsFlowmetersSensorIdReadingPostData = {
    body: SensorReading;
    path: {
        sensor_id: number;
    };
    query?: never;
    url: '/v1/sensors/flowmeters/{sensor_id}/reading';
};

export type PostReadingV1SensorsFlowmetersSensorIdReadingPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostReadingV1SensorsFlowmetersSensorIdReadingPostError = PostReadingV1SensorsFlowmetersSensorIdReadingPostErrors[keyof PostReadingV1SensorsFlowmetersSensorIdReadingPostErrors];

export type PostReadingV1SensorsFlowmetersSensorIdReadingPostResponses = {
    /**
     * Successful Response
     */
    200: Sensor;
};

export type PostReadingV1SensorsFlowmetersSensorIdReadingPostResponse = PostReadingV1SensorsFlowmetersSensorIdReadingPostResponses[keyof PostReadingV1SensorsFlowmetersSensorIdReadingPostResponses];

export type PostSetpointV1SensorsFlowmetersSensorIdSetpointPostData = {
    body: Setpoint;
    path: {
        sensor_id: number;
    };
    query?: never;
    url: '/v1/sensors/flowmeters/{sensor_id}/setpoint';
};

export type PostSetpointV1SensorsFlowmetersSensorIdSetpointPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostSetpointV1SensorsFlowmetersSensorIdSetpointPostError = PostSetpointV1SensorsFlowmetersSensorIdSetpointPostErrors[keyof PostSetpointV1SensorsFlowmetersSensorIdSetpointPostErrors];

export type PostSetpointV1SensorsFlowmetersSensorIdSetpointPostResponses = {
    /**
     * Successful Response
     */
    200: Sensor;
};

export type PostSetpointV1SensorsFlowmetersSensorIdSetpointPostResponse = PostSetpointV1SensorsFlowmetersSensorIdSetpointPostResponses[keyof PostSetpointV1SensorsFlowmetersSensorIdSetpointPostResponses];

export type GetVersionV1InfoVersionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/info/version';
};

export type GetVersionV1InfoVersionGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type GetVersionV1InfoVersionGetResponse = GetVersionV1InfoVersionGetResponses[keyof GetVersionV1InfoVersionGetResponses];

export type AddToQueueV1MissionsFlowQueuePostData = {
    body: Array<FlowControlMission>;
    path?: never;
    query?: never;
    url: '/v1/missions/flow/queue';
};

export type AddToQueueV1MissionsFlowQueuePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddToQueueV1MissionsFlowQueuePostError = AddToQueueV1MissionsFlowQueuePostErrors[keyof AddToQueueV1MissionsFlowQueuePostErrors];

export type AddToQueueV1MissionsFlowQueuePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentV1MissionsFlowCurrentGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/missions/flow/current';
};

export type GetCurrentV1MissionsFlowCurrentGetResponses = {
    /**
     * Successful Response
     */
    200: FlowControlMission | null;
};

export type GetCurrentV1MissionsFlowCurrentGetResponse = GetCurrentV1MissionsFlowCurrentGetResponses[keyof GetCurrentV1MissionsFlowCurrentGetResponses];

export type GetNextV1MissionsFlowNextGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/missions/flow/next';
};

export type GetNextV1MissionsFlowNextGetResponses = {
    /**
     * Successful Response
     */
    200: FlowControlMission | null;
};

export type GetNextV1MissionsFlowNextGetResponse = GetNextV1MissionsFlowNextGetResponses[keyof GetNextV1MissionsFlowNextGetResponses];

export type GetQueueLengthV1MissionsFlowQueueLengthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/missions/flow/queue/length';
};

export type GetQueueLengthV1MissionsFlowQueueLengthGetResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type GetQueueLengthV1MissionsFlowQueueLengthGetResponse = GetQueueLengthV1MissionsFlowQueueLengthGetResponses[keyof GetQueueLengthV1MissionsFlowQueueLengthGetResponses];

export type GetActiveV1MissionsFlowActiveGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/missions/flow/active';
};

export type GetActiveV1MissionsFlowActiveGetResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type GetActiveV1MissionsFlowActiveGetResponse = GetActiveV1MissionsFlowActiveGetResponses[keyof GetActiveV1MissionsFlowActiveGetResponses];

export type SetActiveV1MissionsFlowActivePostData = {
    body?: never;
    path?: never;
    query: {
        active: boolean;
    };
    url: '/v1/missions/flow/active';
};

export type SetActiveV1MissionsFlowActivePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetActiveV1MissionsFlowActivePostError = SetActiveV1MissionsFlowActivePostErrors[keyof SetActiveV1MissionsFlowActivePostErrors];

export type SetActiveV1MissionsFlowActivePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};