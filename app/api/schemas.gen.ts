// This file is auto-generated by @hey-api/openapi-ts

export const FlowmeterSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['flowmeter'],
            const: 'flowmeter',
            title: 'Type',
            default: 'flowmeter'
        },
        id: {
            type: 'integer',
            minimum: 0,
            title: 'Id',
            examples: [0, 1, 2]
        },
        current_reading: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SensorReading'
                },
                {
                    type: 'null'
                }
            ]
        },
        unit: {
            type: 'string',
            title: 'Unit',
            default: 'l/min'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'Flowmeter',
    description: 'Model for a flowmeter sensor.'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ProportionalValveSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['proportional valve'],
            const: 'proportional valve',
            title: 'Type',
            default: 'proportional valve'
        },
        id: {
            type: 'integer',
            minimum: -1,
            title: 'Id',
            examples: [0, 1, 2]
        },
        state: {
            type: 'number',
            maximum: 100,
            minimum: 0,
            title: 'State'
        },
        current_position: {
            anyOf: [
                {
                    type: 'number',
                    maximum: 100,
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Position'
        }
    },
    type: 'object',
    required: ['id', 'state'],
    title: 'ProportionalValve',
    description: 'Model representing a proportional valve actuator.'
} as const;

export const PumpSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['pump'],
            const: 'pump',
            title: 'Type',
            default: 'pump'
        },
        id: {
            type: 'integer',
            minimum: -1,
            title: 'Id',
            examples: [0, 1, 2]
        },
        state: {
            type: 'boolean',
            title: 'State'
        }
    },
    type: 'object',
    required: ['id', 'state'],
    title: 'Pump',
    description: 'Model representing a pump actuator.'
} as const;

export const SensorReadingSchema = {
    properties: {
        value: {
            type: 'number',
            title: 'Value'
        },
        timestamp_ns: {
            type: 'integer',
            title: 'Timestamp Ns',
            description: 'Timestamp of the reading in nanoseconds since Epoch',
            examples: [1730906908814683100]
        }
    },
    type: 'object',
    required: ['value', 'timestamp_ns'],
    title: 'SensorReading',
    description: 'Base model for a sensor reading.'
} as const;

export const SolenoidValveSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['solenoid valve'],
            const: 'solenoid valve',
            title: 'Type',
            default: 'solenoid valve'
        },
        id: {
            type: 'integer',
            minimum: -1,
            title: 'Id',
            examples: [0, 1, 2]
        },
        state: {
            type: 'boolean',
            title: 'State'
        }
    },
    type: 'object',
    required: ['id', 'state'],
    title: 'SolenoidValve',
    description: 'Model representing a solenoid valve actuator.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;