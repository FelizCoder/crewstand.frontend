// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetAllActuatorsV1ActuatorsGetError, GetAllActuatorsV1ActuatorsGetResponse, GetAllV1ActuatorsSolenoidGetError, GetAllV1ActuatorsSolenoidGetResponse, GetByIdV1ActuatorsSolenoidActuatorIdGetData, GetByIdV1ActuatorsSolenoidActuatorIdGetError, GetByIdV1ActuatorsSolenoidActuatorIdGetResponse, SetStateV1ActuatorsSolenoidSetPostData, SetStateV1ActuatorsSolenoidSetPostError, SetStateV1ActuatorsSolenoidSetPostResponse, GetAllV1ActuatorsProportionalGetError, GetAllV1ActuatorsProportionalGetResponse, GetByIdV1ActuatorsProportionalActuatorIdGetData, GetByIdV1ActuatorsProportionalActuatorIdGetError, GetByIdV1ActuatorsProportionalActuatorIdGetResponse, SetStateV1ActuatorsProportionalSetPostData, SetStateV1ActuatorsProportionalSetPostError, SetStateV1ActuatorsProportionalSetPostResponse, GetAllV1ActuatorsPumpGetError, GetAllV1ActuatorsPumpGetResponse, GetByIdV1ActuatorsPumpActuatorIdGetData, GetByIdV1ActuatorsPumpActuatorIdGetError, GetByIdV1ActuatorsPumpActuatorIdGetResponse, SetStateV1ActuatorsPumpSetPostData, SetStateV1ActuatorsPumpSetPostError, SetStateV1ActuatorsPumpSetPostResponse, GetAllSensorsV1SensorsGetError, GetAllSensorsV1SensorsGetResponse, GetAllV1SensorsFlowmetersGetError, GetAllV1SensorsFlowmetersGetResponse, GetByIdV1SensorsFlowmetersSensorIdGetData, GetByIdV1SensorsFlowmetersSensorIdGetError, GetByIdV1SensorsFlowmetersSensorIdGetResponse, PostReadingV1SensorsFlowmetersSensorIdReadingPostData, PostReadingV1SensorsFlowmetersSensorIdReadingPostError, PostReadingV1SensorsFlowmetersSensorIdReadingPostResponse, RootGetError, RootGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get All Actuators
 * Retrieve a list of all actuators, including solenoid valves, proportional valves, and pumps.
 *
 * Returns:
 * List[Union[SolenoidValve, ProportionalValve, Pump]]: A list containing all the actuators.
 */
export const getAllActuatorsV1ActuatorsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllActuatorsV1ActuatorsGetResponse, GetAllActuatorsV1ActuatorsGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/'
}); };

/**
 * Get All
 * Retrieve all actuators of a specific type.
 *
 * Returns:
 * List[service.item_type]: A list of actuators of the specified type.
 */
export const getAllV1ActuatorsSolenoidGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllV1ActuatorsSolenoidGetResponse, GetAllV1ActuatorsSolenoidGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/solenoid/'
}); };

/**
 * Get By Id
 * Retrieve a specific actuator by its ID.
 *
 * Args:
 * actuator_id (int): The ID of the actuator to retrieve.
 *
 * Returns:
 * service.item_type: The actuator object with the specified ID.
 */
export const getByIdV1ActuatorsSolenoidActuatorIdGet = <ThrowOnError extends boolean = false>(options: Options<GetByIdV1ActuatorsSolenoidActuatorIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetByIdV1ActuatorsSolenoidActuatorIdGetResponse, GetByIdV1ActuatorsSolenoidActuatorIdGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/solenoid/{actuator_id}'
}); };

/**
 * Set State
 * Set the state of a specific actuator.
 *
 * Args:
 * actuator (service.item_type): The actuator object with the state to be set.
 *
 * Returns:
 * service.item_type: The actuator object after its state has been updated.
 */
export const setStateV1ActuatorsSolenoidSetPost = <ThrowOnError extends boolean = false>(options: Options<SetStateV1ActuatorsSolenoidSetPostData, ThrowOnError>) => { return (options?.client ?? client).post<SetStateV1ActuatorsSolenoidSetPostResponse, SetStateV1ActuatorsSolenoidSetPostError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/solenoid/set'
}); };

/**
 * Get All
 * Retrieve all actuators of a specific type.
 *
 * Returns:
 * List[service.item_type]: A list of actuators of the specified type.
 */
export const getAllV1ActuatorsProportionalGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllV1ActuatorsProportionalGetResponse, GetAllV1ActuatorsProportionalGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/proportional/'
}); };

/**
 * Get By Id
 * Retrieve a specific actuator by its ID.
 *
 * Args:
 * actuator_id (int): The ID of the actuator to retrieve.
 *
 * Returns:
 * service.item_type: The actuator object with the specified ID.
 */
export const getByIdV1ActuatorsProportionalActuatorIdGet = <ThrowOnError extends boolean = false>(options: Options<GetByIdV1ActuatorsProportionalActuatorIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetByIdV1ActuatorsProportionalActuatorIdGetResponse, GetByIdV1ActuatorsProportionalActuatorIdGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/proportional/{actuator_id}'
}); };

/**
 * Set State
 * Set the state of a specific actuator.
 *
 * Args:
 * actuator (service.item_type): The actuator object with the state to be set.
 *
 * Returns:
 * service.item_type: The actuator object after its state has been updated.
 */
export const setStateV1ActuatorsProportionalSetPost = <ThrowOnError extends boolean = false>(options: Options<SetStateV1ActuatorsProportionalSetPostData, ThrowOnError>) => { return (options?.client ?? client).post<SetStateV1ActuatorsProportionalSetPostResponse, SetStateV1ActuatorsProportionalSetPostError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/proportional/set'
}); };

/**
 * Get All
 * Retrieve all actuators of a specific type.
 *
 * Returns:
 * List[service.item_type]: A list of actuators of the specified type.
 */
export const getAllV1ActuatorsPumpGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllV1ActuatorsPumpGetResponse, GetAllV1ActuatorsPumpGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/pump/'
}); };

/**
 * Get By Id
 * Retrieve a specific actuator by its ID.
 *
 * Args:
 * actuator_id (int): The ID of the actuator to retrieve.
 *
 * Returns:
 * service.item_type: The actuator object with the specified ID.
 */
export const getByIdV1ActuatorsPumpActuatorIdGet = <ThrowOnError extends boolean = false>(options: Options<GetByIdV1ActuatorsPumpActuatorIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetByIdV1ActuatorsPumpActuatorIdGetResponse, GetByIdV1ActuatorsPumpActuatorIdGetError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/pump/{actuator_id}'
}); };

/**
 * Set State
 * Set the state of a specific actuator.
 *
 * Args:
 * actuator (service.item_type): The actuator object with the state to be set.
 *
 * Returns:
 * service.item_type: The actuator object after its state has been updated.
 */
export const setStateV1ActuatorsPumpSetPost = <ThrowOnError extends boolean = false>(options: Options<SetStateV1ActuatorsPumpSetPostData, ThrowOnError>) => { return (options?.client ?? client).post<SetStateV1ActuatorsPumpSetPostResponse, SetStateV1ActuatorsPumpSetPostError, ThrowOnError>({
    ...options,
    url: '/v1/actuators/pump/set'
}); };

/**
 * Get All Sensors
 * Retrieve a list of all sensors, including flowmeters.
 *
 * Returns:
 * List[Union[Flowmeter]]: A list containing all the sensors.
 */
export const getAllSensorsV1SensorsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllSensorsV1SensorsGetResponse, GetAllSensorsV1SensorsGetError, ThrowOnError>({
    ...options,
    url: '/v1/sensors/'
}); };

/**
 * Get All
 * Retrieve all sensors of a specific type.
 *
 * Returns:
 * List[self.service.item_type]: A list of sensors of the specified type.
 */
export const getAllV1SensorsFlowmetersGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllV1SensorsFlowmetersGetResponse, GetAllV1SensorsFlowmetersGetError, ThrowOnError>({
    ...options,
    url: '/v1/sensors/flowmeters/'
}); };

/**
 * Get By Id
 * Retrieve a specific sensor by its ID.
 *
 * Args:
 * sensor_id (int): The ID of the sensor to retrieve.
 *
 * Returns:
 * self.service.item_type: The sensor object with the specified ID.
 */
export const getByIdV1SensorsFlowmetersSensorIdGet = <ThrowOnError extends boolean = false>(options: Options<GetByIdV1SensorsFlowmetersSensorIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetByIdV1SensorsFlowmetersSensorIdGetResponse, GetByIdV1SensorsFlowmetersSensorIdGetError, ThrowOnError>({
    ...options,
    url: '/v1/sensors/flowmeters/{sensor_id}'
}); };

/**
 * Post Reading
 * Post a new reading for a specific sensor.
 *
 * Args:
 * sensor_id (int): The ID of the sensor.
 * reading (SensorReading): The new reading to update.
 *
 * Returns:
 * self.service.item_type: The updated sensor object.
 */
export const postReadingV1SensorsFlowmetersSensorIdReadingPost = <ThrowOnError extends boolean = false>(options: Options<PostReadingV1SensorsFlowmetersSensorIdReadingPostData, ThrowOnError>) => { return (options?.client ?? client).post<PostReadingV1SensorsFlowmetersSensorIdReadingPostResponse, PostReadingV1SensorsFlowmetersSensorIdReadingPostError, ThrowOnError>({
    ...options,
    url: '/v1/sensors/flowmeters/{sensor_id}/reading'
}); };

/**
 * Root
 * Returns a simple greeting message.
 *
 * Returns:
 * dict: A dictionary containing a single key-value pair with the message.
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<RootGetResponse, RootGetError, ThrowOnError>({
    ...options,
    url: '/'
}); };